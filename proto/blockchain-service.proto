syntax = "proto3";
package com.ampnet.crowdfunding.proto;

/********** IMPORTANT NOTE:***************
All amount (fiat) values in request and response messages are x100 format integers,
for example amount: 1550 is actually 15.50 EUR.
******************************************/

//////// Cooperative contract messages ///////

message GenerateAddWalletTxRequest {
    string wallet = 1;
}

message WalletActiveRequest {
    string walletTxHash = 1;
}

message WalletActiveResponse {
    bool active = 1;
}


///////// EUR contract messages //////////

message BalanceRequest {
    string walletTxHash = 1;
}

message BalanceResponse {
    string balance = 1;
}

message GenerateMintTxRequest {
    string toTxHash = 1;
    string amount = 2;
}

message GenerateBurnFromTxRequest {
    string burnFromTxHash = 1;
}

message GenerateApproveWithdrawTxRequest {
    string fromTxHash = 1;
    string amount = 2;
}

message GenerateInvestTxRequest {
    string fromTxHash = 1;
    string projectTxHash = 2;
    string amount = 3;
}

///////// Organization contract //////////



///////// Project contract ///////////////

message GenerateStartRevenueSharesPayoutTxRequest {
    string fromTxHash = 1;
    string projectTxHash = 2;
    string revenue = 3;
}


////////// Transaction messages //////////

message PostTxRequest {
    string data = 1;
}

message PostVaultTxRequest {
    string data = 1;
}

message PostTxResponse {
    string txHash = 1;
}

///////// Contract create messages /////////

message GenerateCreateOrganizationTxRequest {
    string fromTxHash = 1;
}

message GenerateCreateProjectTxRequest {
    string fromTxHash = 1;
    string organizationTxHash = 2;
    string maxInvestmentPerUser = 3;
    string minInvestmentPerUser = 4;
    string investmentCap = 5;
    string endInvestmentTime = 6;
}

////////// Generic messages ////////////////

message RawTxResponse {
    string tx = 1;
}

message Empty {

}


///////// Service definition ////////////////

service BlockchainService {

    // Cooperative

    rpc generateAddWalletTx(GenerateAddWalletTxRequest) returns (RawTxResponse);
    rpc isWalletActive(WalletActiveRequest) returns (WalletActiveResponse);


    // EUR

    rpc generateMintTx(GenerateMintTxRequest) returns (RawTxResponse);
    rpc generateBurnFromTx(GenerateBurnFromTxRequest) returns (RawTxResponse);
    rpc generateApproveWithdrawTx(GenerateApproveWithdrawTxRequest) returns (RawTxResponse);
    rpc generateInvestTx(GenerateInvestTxRequest) returns (RawTxResponse);
    rpc getBalance(BalanceRequest) returns (BalanceResponse);


    // Organization


    // Project

    rpc generateStartRevenueSharesPayoutTx(GenerateStartRevenueSharesPayoutTxRequest) returns (RawTxResponse);

    
    // Contract create
    
    rpc generateCreateOrganizationTx(GenerateCreateOrganizationTxRequest) returns (RawTxResponse);
    rpc generateCreateProjectTx(GenerateCreateProjectTxRequest) returns (RawTxResponse);

    
    // Transactions

    rpc postTransaction(PostTxRequest) returns (PostTxResponse);

}
